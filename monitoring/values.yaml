kube-prometheus-stack:
  # ===== CONFIGURAÇÕES ESPECÍFICAS PARA K3S =====
  
  # Desabilitar componentes que não funcionam com K3s
  kubeEtcd:
    enabled: false  # K3s usa SQLite, não etcd
  
  kubeControllerManager:
    enabled: false  # Métricas duplicadas em K3s
    
  kubeScheduler:
    enabled: false  # Métricas duplicadas em K3s
    
  kubeProxy:
    enabled: false  # Métricas duplicadas em K3s
    
  # Desabilitar regras que não funcionam com K3s
  defaultRules:
    create: true
    rules:
      etcd: false
      kubeControllerManager: false
      kubeScheduler: false
      kubeProxy: false
      
  # ===== CONFIGURAÇÃO DO GRAFANA =====
  grafana:
    enabled: true
    grafana.ini:
      server:
        http_addr: 0.0.0.0
    admin:
      existingSecret: grafana-user
      userKey: grafana-user
      passwordKey: grafana-password
    
    # Desabilitar dashboards padrões que não funcionam com K3s
    defaultDashboardsEnabled: true
    
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - grafana.orcamentos.app
      tls:
        - secretName: grafana-tls
          hosts:
            - grafana.orcamentos.app

  sidecar:
    dashboards:
      enabled: true
      searchNamespace: monitoring
      label: grafana_dashboard
      labelValue: "1"
      # Configuração mais conservadora
      watchMethod: LIST
      resource: configmap  # Só ConfigMaps, não Secrets
      # Recursos aumentados
      resources:
        limits:
          cpu: 300m
          memory: 512Mi  # Memória bem generosa
        requests:
          cpu: 100m
          memory: 256Mi
      env:
        - name: METHOD
          value: LIST
        - name: LABEL
          value: grafana_dashboard
        - name: LABEL_VALUE
          value: "1"
        - name: FOLDER
          value: /tmp/dashboards
        - name: RESOURCE
          value: configmap
        - name: LIST_INTERVAL
          value: "300"  # Verificar a cada 5 minutos (mais lento)
        - name: IGNORE_ALREADY_PROCESSED
          value: "true"
        - name: LOG_LEVEL
          value: DEBUG  # Para mais detalhes nos logs
        - name: SLEEP_TIME
          value: "10"  # Pausa maior entre verificações
            
      datasources:
        enabled: true
        searchNamespace: monitoring
        env:
          - name: METHOD
            value: LIST  # Mesma configuração para datasources

  # ===== CONFIGURAÇÃO DO PROMETHEUS =====
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      # Configurações para K3s
      retention: 30d
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: local-path  # K3s default storage class
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
    
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: monitoring-prometheus-auth@kubernetescrd,monitoring-prometheus-ratelimit@kubernetescrd
      hosts:
        - prometheus.orcamentos.app
      tls:
        - secretName: prometheus-tls
          hosts:
            - prometheus.orcamentos.app

  # ===== CONFIGURAÇÃO DO ALERTMANAGER =====
  alertmanager:
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: local-path  # K3s default storage class
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 2Gi
    
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: monitoring-prometheus-auth@kubernetescrd,monitoring-prometheus-ratelimit@kubernetescrd
      hosts:
        - alertmanager.orcamentos.app
      tls:
        - secretName: alertmanager-tls
          hosts:
            - alertmanager.orcamentos.app

  # ===== COMPONENTES HABILITADOS =====
  kubeStateMetrics:
    enabled: true
    
  nodeExporter:
    enabled: true
    
  # ===== CONFIGURAÇÕES ESPECÍFICAS PARA K3S =====
  # Permitir que o Prometheus colete métricas do kubelet K3s
  kubelet:
    enabled: true
    serviceMonitor:
      # Configurações específicas para K3s
      cAdvisorMetricRelabelings:
        # Evitar métricas duplicadas em K3s
        - sourceLabels: [__name__]
          regex: '(container_cpu_usage_seconds_total|container_memory_working_set_bytes)'
          action: keep