kube-prometheus-stack:
  # ===== K3S COMPONENTS DISABLED =====
  kubeEtcd:
    enabled: false
  kubeControllerManager:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  
  defaultRules:
    create: true
    rules:
      etcd: false
      kubeControllerManager: false
      kubeScheduler: false
      kubeProxy: false
  
  # ===== GRAFANA CONFIGURATION =====
  grafana:
    enabled: true
    grafana.ini:
      server:
        http_addr: 0.0.0.0
    admin:
      existingSecret: grafana-user
      userKey: grafana-user
      passwordKey: grafana-password
    defaultDashboardsEnabled: true
    
    # ===== SIDECAR CONFIGURATION (CORRIGIDO) =====
    sidecar:
      dashboards:
        enabled: false  # Desabilitado para evitar crashes em K3s
      datasources:
        enabled: true
        searchNamespace: monitoring
        env:
          - name: METHOD
            value: LIST
    
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - grafana.orcamentos.app
      tls:
        - secretName: grafana-tls
          hosts:
            - grafana.orcamentos.app
  
  # ===== PROMETHEUS CONFIGURATION =====
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      retention: 30d
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: local-path
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi
    
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: monitoring-prometheus-auth@kubernetescrd,monitoring-prometheus-ratelimit@kubernetescrd
      hosts:
        - prometheus.orcamentos.app
      tls:
        - secretName: prometheus-tls
          hosts:
            - prometheus.orcamentos.app
  
  # ===== ALERTMANAGER CONFIGURATION =====
  alertmanager:
    alertmanagerSpec:
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: local-path
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 2Gi
    
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: traefik
        cert-manager.io/cluster-issuer: letsencrypt-prod
        traefik.ingress.kubernetes.io/router.middlewares: monitoring-prometheus-auth@kubernetescrd,monitoring-prometheus-ratelimit@kubernetescrd
      hosts:
        - alertmanager.orcamentos.app
      tls:
        - secretName: alertmanager-tls
          hosts:
            - alertmanager.orcamentos.app
  
  # ===== ADDITIONAL COMPONENTS =====
  kubeStateMetrics:
    enabled: true
  
  nodeExporter:
    enabled: true
    hostNetwork: true
    hostPID: true
    securityContext:
      runAsNonRoot: false
      runAsUser: 0
    serviceMonitor:
      enabled: true
      jobLabel: jobLabel
  
  kubelet:
    enabled: true
    serviceMonitor:
      cAdvisorMetricRelabelings:
        - sourceLabels: [__name__]
          regex: '(container_cpu_usage_seconds_total|container_memory_working_set_bytes)'
          action: keep